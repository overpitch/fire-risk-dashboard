diff --git a/.stfolder.removed-20250324-113018/syncthing-encryption_password_token b/.stfolder.removed-20250324-113018/syncthing-encryption_password_token
new file mode 100644
index 0000000..892c797
--- /dev/null
+++ b/.stfolder.removed-20250324-113018/syncthing-encryption_password_token
@@ -0,0 +1 @@
+{"FolderID":"4jedu-j6xew","Token":"dhd2mCd4dLadz2PcvRd+kfZ7nHjQ3D70sTg/2SfCkJjTp2fM"}
diff --git a/.stfolder/syncthing-folder-f0f84e.txt b/.stfolder/syncthing-folder-f0f84e.txt
new file mode 100644
index 0000000..3e91368
--- /dev/null
+++ b/.stfolder/syncthing-folder-f0f84e.txt
@@ -0,0 +1,5 @@
+# This directory is a Syncthing folder marker.
+# Do not delete.
+
+folderID: rudhq-uu6vl
+created: 2025-03-24T11:33:18-07:00
diff --git a/main.py b/main.py
index 999a917..40ebec5 100644
--- a/main.py
+++ b/main.py
@@ -395,7 +395,13 @@ async def simulate_fire_risk(request: Request, thresholds: Dict[str, float]):
     # Calculate fire risk using custom thresholds
     simulated_risk, explanation = calculate_fire_risk(modified_weather_data, custom_thresholds=thresholds)
 
-    return {"risk": simulated_risk, "explanation": explanation}
+    # Include the custom thresholds in the response
+    return {
+        "risk": simulated_risk, 
+        "explanation": explanation,
+        "custom_thresholds": thresholds,
+        "weather": weather_data
+    }
 
 
 
diff --git a/templates/index.html b/templates/index.html
index 562f20a..26513e7 100644
--- a/templates/index.html
+++ b/templates/index.html
@@ -10,6 +10,111 @@
     <link href="/static/synoptic-logo.css" rel="stylesheet">
     <style>
         /* existing styles */
+        .cache-info {
+            margin-bottom: 15px;
+        }
+        .cache-info.fresh {
+            color: #2e7d32;
+        }
+        .cache-info.cached {
+            color: #ef6c00;
+        }
+        .cache-info.loading {
+            color: #0277bd;
+        }
+        
+        /* Weather details styles */
+        .weather-details h5 {
+            font-size: 1.5rem;
+            margin-bottom: 1rem;
+        }
+        
+        .weather-details ul {
+            list-style-type: disc;
+            padding-left: 1.5rem;
+        }
+        
+        .weather-details li {
+            margin-bottom: 0.75rem;
+            font-size: 1.1rem;
+        }
+        
+        .weather-value {
+            font-weight: bold;
+        }
+        
+        .weather-threshold {
+            color: #6c757d;
+            margin-left: 0.5rem;
+            border-left: 1px solid #dee2e6;
+            padding-left: 0.5rem;
+        }
+        
+        /* Info icon and tooltip styles */
+        .info-icon {
+            display: inline-flex;
+            align-items: center;
+            justify-content: center;
+            width: 16px;
+            height: 16px;
+            background-color: #0d6efd;
+            color: white;
+            border-radius: 50%;
+            font-size: 10px;
+            font-weight: bold;
+            margin-left: 5px;
+            cursor: pointer;
+        }
+        
+        /* Bootstrap tooltip customization */
+        .tooltip {
+            font-size: 0.8rem;
+        }
+        
+        .tooltip-inner {
+            max-width: 150px;
+            padding: 4px 8px;
+            background-color: #212529;
+        }
+        
+        /* Fire risk styles */
+        .fire-risk-orange {
+            background-color: #FFA500; /* Orange color for the background */
+            color: #000000; /* Black text */
+            padding: 15px;
+            border-radius: 5px;
+            margin-bottom: 15px;
+        }
+        
+        .fire-risk-red {
+            background-color: #dc3545; /* Red color for extreme risk */
+            color: #ffffff; /* White text for better contrast */
+            padding: 15px;
+            border-radius: 5px;
+            margin-bottom: 15px;
+        }
+        
+        /* Temporary threshold style */
+        .temporary-threshold {
+            font-weight: bold;
+            margin-left: 0.5rem;
+            border-left: 1px solid #dee2e6;
+            padding-left: 0.5rem;
+        }
+        
+        /* Use exactly #FFA500 as requested */
+        .orange-text {
+            color: #FFA500 !important;
+        }
+        
+        /* Custom alert class with exact #FFA500 background */
+        .alert-custom-orange {
+            background-color: #FFA500;
+            color: #000000;
+            padding: 15px;
+            border-radius: 5px;
+            margin-bottom: 15px;
+        }
     </style>
 </head>
 <body>
@@ -23,16 +128,16 @@
     </nav>
 
     <div class="container mt-5">
-        <div id="simulation-banner" class="alert alert-warning d-none" role="alert">
-            <strong>Simulation Mode:</strong> Using custom threshold values.
+        <div id="temporary-thresholds-banner" class="alert alert-warning d-none" role="alert">
+            <strong>Temporary Thresholds Mode:</strong> Using user-defined threshold values.
         </div>
         <div class="d-flex justify-content-between align-items-center mb-2 mt-3">
             <div id="cache-info" class="cache-info">Data status: Loading...</div>
             <button id="refresh-btn" class="btn btn-sm btn-outline-primary" onclick="manualRefresh()">Refresh Data</button>
-            <button id="what-if-btn" class="btn btn-sm btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#whatIfModal" onclick="openWhatIfModal()">What If?</button>
+            <button id="what-if-btn" class="btn btn-sm btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#whatIfModal" onclick="openWhatIfModal()">Change Thresholds</button>
         </div>
         <div id="fire-risk" class="alert alert-info">Loading fire risk data...</div>
-        <div id="simulation-results"></div>
+        <div id="threshold-results"></div>
         <div id="weather-details" class="mt-3"></div>
         <div class="alert mt-4 mb-4" style="background-color: #d1ecff;">
             <p>Fire weather needs to be local. A few Sierra City residents analyze local wind, humidity, temperature and soil moisture data and offer their advice in real time. This fire weather advisory is a best guess of what you should know about local fire weather conditions before there is a fire event.</p>
@@ -51,7 +156,7 @@
             <div class="modal-dialog modal-dialog-centered">
                 <div class="modal-content">
                     <div class="modal-header">
-                        <h5 class="modal-title" id="whatIfModalLabel">What If?</h5>
+                        <h5 class="modal-title" id="whatIfModalLabel">Adjust Thresholds</h5>
                         <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                     </div>
                     <div class="modal-body">
@@ -80,7 +185,7 @@
                     </div>
                     <div class="modal-footer">
                         <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
-                        <button type="button" class="btn btn-primary" onclick="runSimulation()">Run Simulation</button>
+                        <button type="button" class="btn btn-primary" onclick="applyThresholds()">Apply Thresholds</button>
                     </div>
                 </div>
             </div>
@@ -112,22 +217,25 @@
         // Note: These are Jinja2 template variables that will be replaced with actual values when the template is rendered
         // The JavaScript linter in VSCode may show errors for these lines, but they are not actual errors
         /* eslint-disable */
-        const THRESH_TEMP = {{ THRESH_TEMP|tojson }};
-        const THRESH_HUMID = {{ THRESH_HUMID|tojson }};
-        const THRESH_WIND = {{ THRESH_WIND|tojson }};
-        const THRESH_GUSTS = {{ THRESH_GUSTS|tojson }};
-        const THRESH_SOIL_MOIST = {{ THRESH_SOIL_MOIST|tojson }};
+        window.THRESH_TEMP = "{{ THRESH_TEMP|tojson }}".replace(/^"|"$/g, '');
+        window.THRESH_HUMID = "{{ THRESH_HUMID|tojson }}".replace(/^"|"$/g, '');
+        window.THRESH_WIND = "{{ THRESH_WIND|tojson }}".replace(/^"|"$/g, '');
+        window.THRESH_GUSTS = "{{ THRESH_GUSTS|tojson }}".replace(/^"|"$/g, '');
+        window.THRESH_SOIL_MOIST = "{{ THRESH_SOIL_MOIST|tojson }}".replace(/^"|"$/g, '');
         /* eslint-enable */
+        
+        // Global variable to store custom thresholds
+        window.customThresholds = null;
 
         function openWhatIfModal() {
-            document.getElementById('temp-threshold').value = THRESH_TEMP;
-            document.getElementById('humid-threshold').value = THRESH_HUMID;
-            document.getElementById('wind-threshold').value = THRESH_WIND;
-            document.getElementById('gusts-threshold').value = THRESH_GUSTS;
-            document.getElementById('soil-threshold').value = THRESH_SOIL_MOIST;
+            document.getElementById('temp-threshold').value = window.THRESH_TEMP;
+            document.getElementById('humid-threshold').value = window.THRESH_HUMID;
+            document.getElementById('wind-threshold').value = window.THRESH_WIND;
+            document.getElementById('gusts-threshold').value = window.THRESH_GUSTS;
+            document.getElementById('soil-threshold').value = window.THRESH_SOIL_MOIST;
         }
 
-        async function runSimulation() {
+        async function applyThresholds() {
             const form = document.getElementById('what-if-form');
             const formData = new FormData(form);
             const customThresholds = {};
@@ -144,43 +252,97 @@
 
                 if (!response.ok) {
                     const errorData = await response.json();
-                    throw new Error(`Simulation failed: ${errorData.detail}`);
+                    throw new Error(`Failed to apply thresholds: ${errorData.detail}`);
                 }
 
                 const data = await response.json();
-                displaySimulationResults(data);
+                displayThresholdResults(data);
                 // Use plain JavaScript to hide the modal
                 const whatIfModal = document.getElementById('whatIfModal');
                 const modal = bootstrap.Modal.getInstance(whatIfModal);
                 modal.hide();
 
             } catch (error) {
-                console.error('Error running simulation:', error);
+                console.error('Error applying thresholds:', error);
                 alert(error.message);
             }
         }
 
-        function displaySimulationResults(data) {
-            const resultsDiv = document.getElementById('simulation-results');
+        function displayThresholdResults(data) {
+            console.log("Displaying threshold results with data:", data);
+            const resultsDiv = document.getElementById('threshold-results');
             const risk = data.risk;
             const explanation = data.explanation;
-
+            const customThresholds = data.custom_thresholds;
+            
+            // Store custom thresholds in global variable for use in updateDashboard
+            window.customThresholds = customThresholds;
+            
+            // Create a risk alert with the simulation results
             const resultsHTML = `
-            <div class="alert alert-warning" role="alert">
-                <strong>Simulation Results:</strong>
-                Fire Risk: ${risk} - ${explanation}
-                <button type="button" class="close" data-dismiss="alert" aria-label="Close" onclick="resetSimulation()">
-                    <span aria-hidden="true">&times;</span>
-                </button>
+            <div class="${risk === 'Red' ? 'alert alert-danger' : 'alert-custom-orange'} mb-4" role="alert">
+                <h4 class="alert-heading">Results with Temporary Thresholds</h4>
+                <p class="mb-0"><strong>Fire Risk: ${risk}</strong> - ${explanation}</p>
+                <hr>
+                <div class="d-flex justify-content-end">
+                    <button type="button" class="btn btn-outline-dark btn-sm" onclick="resetThresholds()">
+                        Reset to Default Thresholds
+                    </button>
+                </div>
             </div>
             `;
 
             resultsDiv.innerHTML = resultsHTML;
             document.getElementById('fire-risk').style.display = 'none'; // Hide actual risk
-            document.getElementById('simulation-banner').classList.remove('d-none'); // Show simulation banner
+            document.getElementById('temporary-thresholds-banner').classList.remove('d-none'); // Show temporary thresholds banner
+            
+            // Update cache info
+            updateCacheInfo(data);
+            
+            // Update the dashboard to show custom thresholds
+            updateDashboard(data);
+        }
+        
+        function updateCacheInfo(data) {
+            const cacheInfoDiv = document.getElementById('cache-info');
+            if (cacheInfoDiv && data.cache_info) {
+                const lastUpdated = data.cache_info.last_updated ? new Date(data.cache_info.last_updated) : null;
+                
+                if (data.cached_data && data.cached_data.is_cached) {
+                    const originalTimestamp = new Date(data.cached_data.original_timestamp);
+                    // Format time with timezone
+                    const timeOptions = { 
+                        hour: '2-digit', 
+                        minute: '2-digit', 
+                        second: '2-digit', 
+                        hour12: true,
+                        timeZoneName: 'short'
+                    };
+                    const formattedTime = originalTimestamp.toLocaleTimeString('en-US', timeOptions);
+                    
+                    cacheInfoDiv.textContent = `▲ Using cached data - current data unavailable (Last updated: ${formattedTime})`;
+                    cacheInfoDiv.className = 'cache-info cached';
+                } else if (lastUpdated) {
+                    // Format time with timezone
+                    const timeOptions = { 
+                        hour: '2-digit', 
+                        minute: '2-digit', 
+                        second: '2-digit', 
+                        hour12: true,
+                        timeZoneName: 'short'
+                    };
+                    const formattedTime = lastUpdated.toLocaleTimeString('en-US', timeOptions);
+                    
+                    cacheInfoDiv.textContent = `✓ Data is fresh (Last updated: ${formattedTime})`;
+                    cacheInfoDiv.className = 'cache-info fresh';
+                } else {
+                    cacheInfoDiv.textContent = "Data status: Loading...";
+                    cacheInfoDiv.className = 'cache-info loading';
+                }
+            }
         }
 
-        async function resetSimulation() {
+        async function resetThresholds() {
             try {
                 const response = await fetch('/reset-simulation');
                 if (!response.ok) {
@@ -188,13 +350,19 @@
                     throw new Error(`Reset failed: ${errorData.detail}`);
                 }
 
+                // Clear custom thresholds
+                window.customThresholds = null;
+                
                 // Reset UI to display actual risk
                 document.getElementById('fire-risk').style.display = 'block';
-                document.getElementById('simulation-banner').classList.add('d-none');
-                document.getElementById('simulation-results').innerHTML = '';
+                document.getElementById('temporary-thresholds-banner').classList.add('d-none');
+                document.getElementById('threshold-results').innerHTML = '';
+                
+                // Refresh the dashboard to remove custom thresholds
+                await manualRefresh();
 
             } catch (error) {
-                console.error('Error resetting simulation:', error);
+                console.error('Error resetting thresholds:', error);
                 alert(error.message);
             }
         }
@@ -208,6 +376,12 @@
                 }
                 const data = await response.json();
                 updateDashboard(data);
+                
+                // Initialize Bootstrap tooltips
+                const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
+                tooltipTriggerList.map(function (tooltipTriggerEl) {
+                    return new bootstrap.Tooltip(tooltipTriggerEl);
+                });
             } catch (error) {
                 console.error("Error setting up refresh:", error);
                 alert(error.message);
@@ -223,6 +397,12 @@
                 }
                 const data = await response.json();
                 updateDashboard(data);
+                
+                // Re-initialize Bootstrap tooltips after refresh
+                const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
+                tooltipTriggerList.map(function (tooltipTriggerEl) {
+                    return new bootstrap.Tooltip(tooltipTriggerEl);
+                });
             } catch (error) {
                 console.error("Error during manual refresh:", error);
                 alert(error.message);
@@ -234,40 +414,21 @@
         function updateDashboard(data) {
             console.log("Updating dashboard with:", data);
 
-            // Update cache info
-            const cacheInfoDiv = document.getElementById('cache-info');
-            if (cacheInfoDiv) {
-                if (data.cache_info) {
-                    const lastUpdated = data.cache_info.last_updated ? new Date(data.cache_info.last_updated) : null;
-                    
-                    if (data.cached_data && data.cached_data.is_cached) {
-                        const originalTimestamp = new Date(data.cached_data.original_timestamp);
-                        cacheInfoDiv.textContent = `▲ Using cached data - current data unavailable (Last updated: ${originalTimestamp.toLocaleString()})`;
-                        cacheInfoDiv.className = 'alert alert-warning';
-                    } else if (lastUpdated) {
-                        cacheInfoDiv.textContent = `✓ Data is fresh (Last updated: ${lastUpdated.toLocaleString()})`;
-                        cacheInfoDiv.className = 'alert alert-success';
-                    } else {
-                        cacheInfoDiv.textContent = "Data status: Loading...";
-                        cacheInfoDiv.className = 'alert alert-info';
-                    }
-                } else {
-                    cacheInfoDiv.textContent = "Data status: Loading...";
-                    cacheInfoDiv.className = 'alert alert-info';
-                }
-            }
+            // Update cache info using the shared function
+            updateCacheInfo(data);
 
             // Update fire risk display
             const fireRiskDiv = document.getElementById('fire-risk');
             if (fireRiskDiv && data.explanation) {
-                fireRiskDiv.textContent = data.explanation;
-                
-                // Set appropriate color based on risk level
+                // Format the text to include "Fire Risk: [Color] - " before the explanation
                 if (data.risk === 'Red') {
-                    fireRiskDiv.className = 'alert alert-danger';
+                    fireRiskDiv.textContent = `Fire Risk: Red - ${data.explanation}`;
+                    fireRiskDiv.className = 'fire-risk-red';
                 } else if (data.risk === 'Orange') {
-                    fireRiskDiv.className = 'alert alert-warning';
+                    fireRiskDiv.textContent = `Fire Risk: Orange - ${data.explanation}`;
+                    fireRiskDiv.className = 'fire-risk-orange';
                 } else {
+                    fireRiskDiv.textContent = `Fire Risk: ${data.risk} - ${data.explanation}`;
                     fireRiskDiv.className = 'alert alert-info';
                 }
             }
@@ -275,15 +436,55 @@
             // Update weather details
             const weatherDetailsDiv = document.getElementById('weather-details');
             if (weatherDetailsDiv && data.weather) {
-                let weatherHTML = "<h5>Current Weather Conditions:</h5><ul>";
+                let weatherHTML = "<h5>Current Weather Conditions:</h5><ul class='weather-details'>";
                 
                 // Add each weather parameter with its threshold
                 const weatherParams = [
-                    { key: 'air_temp', label: 'Temperature', unit: '°F', threshold: THRESH_TEMP },
-                    { key: 'relative_humidity', label: 'Humidity', unit: '%', threshold: THRESH_HUMID },
-                    { key: 'wind_speed', label: 'Wind Speed', unit: 'mph', threshold: THRESH_WIND },
-                    { key: 'wind_gust', label: 'Wind Gusts', unit: 'mph', threshold: THRESH_GUSTS },
-                    { key: 'soil_moisture_15cm', label: 'Soil Moisture', unit: '%', threshold: THRESH_SOIL_MOIST }
+                    { 
+                        key: 'air_temp', 
+                        label: 'Temperature', 
+                        unit: '°F', 
+                        threshold: window.THRESH_TEMP,
+                        thresholdPrefix: '>',
+                        source: data.weather.sources?.air_temp || 'Synoptic Data',
+                        location: 'Sierra City'
+                    },
+                    { 
+                        key: 'relative_humidity', 
+                        label: 'Humidity', 
+                        unit: '%', 
+                        threshold: window.THRESH_HUMID,
+                        thresholdPrefix: '<',
+                        source: data.weather.sources?.relative_humidity || 'Synoptic Data',
+                        location: 'Sierra City'
+                    },
+                    { 
+                        key: 'wind_speed', 
+                        label: 'Wind Speed', 
+                        unit: 'mph', 
+                        threshold: window.THRESH_WIND,
+                        thresholdPrefix: '>',
+                        source: data.weather.sources?.wind_speed || 'Synoptic Data',
+                        location: 'Sierra City'
+                    },
+                    { 
+                        key: 'wind_gust', 
+                        label: 'Wind Gusts', 
+                        unit: 'mph', 
+                        threshold: window.THRESH_GUSTS,
+                        thresholdPrefix: '>',
+                        source: data.weather.sources?.wind_gust || 'Wunderground',
+                        location: 'KCASIERR68'
+                    },
+                    { 
+                        key: 'soil_moisture_15cm', 
+                        label: 'Soil Moisture (15cm depth)', 
+                        unit: '%', 
+                        threshold: window.THRESH_SOIL_MOIST,
+                        thresholdPrefix: '<',
+                        source: data.weather.sources?.soil_moisture || 'Synoptic Data',
+                        location: 'Downieville'
+                    }
                 ];
                 
                 for (const param of weatherParams) {
@@ -292,12 +493,54 @@
                         const isCached = data.weather.cached_fields && data.weather.cached_fields[param.key.replace('_15cm', '')];
                         const cachedLabel = isCached ? ' (cached)' : '';
                         
-                        weatherHTML += `<li>${param.label}: ${value}${param.unit}${cachedLabel} (Threshold: ${param.threshold}${param.unit})</li>`;
+                        // Check if we have custom thresholds to display
+                        let customThresholdHTML = '';
+                        if (window.customThresholds) {
+                            let customValue;
+                            let standardValue;
+                            
+                            if (param.key === 'air_temp') {
+                                customValue = window.customThresholds.temp;
+                                standardValue = parseFloat(window.THRESH_TEMP);
+                            }
+                            else if (param.key === 'relative_humidity') {
+                                customValue = window.customThresholds.humid;
+                                standardValue = parseFloat(window.THRESH_HUMID);
+                            }
+                            else if (param.key === 'wind_speed') {
+                                customValue = window.customThresholds.wind;
+                                standardValue = parseFloat(window.THRESH_WIND);
+                            }
+                            else if (param.key === 'wind_gust') {
+                                customValue = window.customThresholds.gusts;
+                                standardValue = parseFloat(window.THRESH_GUSTS);
+                            }
+                            else if (param.key === 'soil_moisture_15cm') {
+                                customValue = window.customThresholds.soil;
+                                standardValue = parseFloat(window.THRESH_SOIL_MOIST);
+                            }
+                            
+                            // Only show temporary threshold if it's different from the standard one
+                            if (customValue !== undefined && customValue !== standardValue) {
+                                // Force the color to be exactly #FFA500 with inline style and !important
+                                customThresholdHTML = `<span class="temporary-threshold" style="color: #FFA500 !important;">Temporary: ${param.thresholdPrefix}${customValue}${param.unit}</span>`;
+                            }
+                        }
+                        
+                        weatherHTML += `
+                            <li>
+                                <span class="weather-value">${param.label}: ${value}${param.unit}${cachedLabel}</span>
+                                <span class="weather-threshold">Threshold: ${param.thresholdPrefix}${param.threshold}${param.unit}</span>
+                                ${customThresholdHTML}
+                                <span class="info-icon" data-bs-toggle="tooltip" data-bs-html="true" title="${param.location}<br>From: ${param.source}">i</span>
+                            </li>
+                        `;
                     }
                 }
                 
                 weatherHTML += "</ul>";
                 weatherDetailsDiv.innerHTML = weatherHTML;
+                weatherDetailsDiv.className = 'weather-details mt-3';
             }
 
             // Update timestamp
@@ -305,10 +548,26 @@
             if (timestampDiv) {
                 if (data.cache_info && data.cache_info.last_updated) {
                     const lastUpdatedDate = new Date(data.cache_info.last_updated);
-                    timestampDiv.textContent = "Last updated: " + lastUpdatedDate.toLocaleString();
+                    // Format time with timezone
+                    const timeOptions = { 
+                        hour: '2-digit', 
+                        minute: '2-digit', 
+                        second: '2-digit', 
+                        hour12: true,
+                        timeZoneName: 'short'
+                    };
+                    const formattedTime = lastUpdatedDate.toLocaleTimeString('en-US', timeOptions);
+                    timestampDiv.textContent = "Last updated: " + formattedTime;
                 } else {
                     const now = new Date();
-                    timestampDiv.textContent = "Last updated: " + now.toLocaleString();
+                    const formattedTime = now.toLocaleTimeString('en-US', { 
+                        hour: '2-digit', 
+                        minute: '2-digit', 
+                        second: '2-digit', 
+                        hour12: true,
+                        timeZoneName: 'short'
+                    });
+                    timestampDiv.textContent = "Last updated: " + formattedTime;
                 }
             }
         }
